{"ast":null,"code":"var _jsxFileName = \"/Users/us579/Desktop/19T3/ResonateTest/resonate/src/pages/Q2.js\";\nimport React, { Component } from 'react';\nimport \"../index.css\";\nexport class Q2 extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        padding: \"15px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      style: {\n        textAlign: \"left\",\n        padding: \"15px\",\n        fontSize: \"30px\",\n        color: \"darkred\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }, \"Q2: Level 100:\", \" \"), React.createElement(\"h4\", {\n      style: {\n        textAlign: \"left\",\n        fontweight: \"bold\",\n        fontSize: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"1. Remove duplicates from an unsorted list (12,11,12,21,41,43,21)\"), React.createElement(\"h5\", {\n      style: {\n        textAlign: \"left\",\n        fontweight: \"bold\",\n        fontSize: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"a. Write the method, make it as efficient as possible\"), React.createElement(\"h5\", {\n      style: {\n        textAlign: \"left\",\n        fontweight: \"bold\",\n        fontSize: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"b. Provide the Time Complexity\"), React.createElement(\"pre\", {\n      style: {\n        textAlign: \"left\"\n      },\n      class: \"brush: python\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"\\n                    array = [12, 11, 12, 21, 41, 43, 21]\\n                    def removeDup(array):\\n                        dic = {}\\n                        ans = []\\n                    for ele in array:\\n                        if ele not in dic.keys():\\n                            dic[ele] = 1\\n                            ans.append(ele)\\n                        else:\\n                            continue\\n                    return ans\\n                    print(removeDup(array))\\n               \"));\n  }\n\n}\nexport default Q2;","map":{"version":3,"sources":["/Users/us579/Desktop/19T3/ResonateTest/resonate/src/pages/Q2.js"],"names":["React","Component","Q2","render","padding","textAlign","fontSize","color","fontweight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,cAAP;AAEA,OAAO,MAAMC,EAAN,SAAiBD,SAAjB,CAA2B;AAC9BE,EAAAA,MAAM,GAAG;AACL,WACE;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE,MADN;AAELD,QAAAA,OAAO,EAAE,MAFJ;AAGLE,QAAAA,QAAQ,EAAE,MAHL;AAILC,QAAAA,KAAK,EAAE;AAJF,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAQiB,GARjB,CADF,EAWE;AACE,MAAA,KAAK,EAAE;AACLF,QAAAA,SAAS,EAAE,MADN;AAELG,QAAAA,UAAU,EAAE,MAFP;AAGLF,QAAAA,QAAQ,EAAE;AAHL,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAXF,EAoBE;AACE,MAAA,KAAK,EAAE;AACLD,QAAAA,SAAS,EAAE,MADN;AAELG,QAAAA,UAAU,EAAE,MAFP;AAGLF,QAAAA,QAAQ,EAAE;AAHL,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DApBF,EA6BE;AACE,MAAA,KAAK,EAAE;AACLD,QAAAA,SAAS,EAAE,MADN;AAELG,QAAAA,UAAU,EAAE,MAFP;AAGLF,QAAAA,QAAQ,EAAE;AAHL,OADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCA7BF,EAuCE;AAAK,MAAA,KAAK,EAAE;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAmC,MAAA,KAAK,EAAC,eAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ugBAvCF,CADF;AAwDH;;AA1D6B;AA6DlC,eAAeH,EAAf","sourcesContent":["import React, { Component } from 'react'\nimport \"../index.css\"\n\nexport class Q2 extends Component {\n    render() {\n        return (\n          <div style={{ padding: \"15px\" }}>\n            <h1\n              style={{\n                textAlign: \"left\",\n                padding: \"15px\",\n                fontSize: \"30px\",\n                color: \"darkred\"\n              }}\n            >\n              Q2: Level 100:{\" \"}\n            </h1>\n            <h4\n              style={{\n                textAlign: \"left\",\n                fontweight: \"bold\",\n                fontSize: \"20px\"\n              }}\n            >\n              1. Remove duplicates from an unsorted list (12,11,12,21,41,43,21)\n            </h4>\n            <h5\n              style={{\n                textAlign: \"left\",\n                fontweight: \"bold\",\n                fontSize: \"20px\"\n              }}\n            >\n              a. Write the method, make it as efficient as possible\n            </h5>\n            <h5\n              style={{\n                textAlign: \"left\",\n                fontweight: \"bold\",\n                fontSize: \"20px\"\n              }}\n            >\n              b. Provide the Time Complexity\n            </h5>\n\n            <pre style={{ textAlign: \"left\" }} class=\"brush: python\">{`\n                    array = [12, 11, 12, 21, 41, 43, 21]\n                    def removeDup(array):\n                        dic = {}\n                        ans = []\n                    for ele in array:\n                        if ele not in dic.keys():\n                            dic[ele] = 1\n                            ans.append(ele)\n                        else:\n                            continue\n                    return ans\n                    print(removeDup(array))\n               `}</pre>\n          </div>\n        );\n    }\n}\n\nexport default Q2\n"]},"metadata":{},"sourceType":"module"}